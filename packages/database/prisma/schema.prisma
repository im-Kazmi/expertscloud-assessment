datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

model User {
  clerkId         String         @id
  name            String
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  email           String         @unique
  avatarUrl       String?
  blockedAt       DateTime?
  meta            Json           @default("{}")
  profileSettings Json           @default("{}")
  featureSettings Json           @default("{}")
  Organization    Organization?  @relation(fields: [organizationId], references: [id])
  organizationId  String?
  tasks           Task[]
  assignedTasks   TaskAssignee[]
}

model Organization {
  id                      String   @id
  name                    String
  imgUrl                  String?
  slug                    String?
  membersCount            Int?
  pendingInvitationsCount Int?
  adminDeleteEnabled      Boolean?
  maxAllowedMemberships   Int?
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  publicMetadata          Json     @default("{}")

  users    User[]
  projects Project[]
}

model Project {
  id          String       @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  completedAt DateTime?
  orgId       String
  org         Organization @relation(fields: [orgId], references: [id])

  tasks Task[]

  @@map("projects")
}

enum TastStats {
  TODO
  COMPLETED
  IN_PROGRESS
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

model Task {
  id          String    @id @default(uuid())
  title       String
  description String?
  status      TastStats @default(TODO)
  priority    Priority  @default(MEDIUM)
  dueDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  projectId String?
  project   Project? @relation(fields: [projectId], references: [id])

  assignees   TaskAssignee[]
  User        User?          @relation(fields: [userClerkId], references: [clerkId])
  userClerkId String?

  @@map("tasks")
}

model TaskAssignee {
  id         String   @id @default(uuid())
  taskId     String
  userId     String
  assignedAt DateTime @default(now())

  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [clerkId], onDelete: Cascade)

  @@unique([taskId, userId])
  @@map("task_assignees")
}
