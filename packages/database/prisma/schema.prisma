datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

enum AccountStatus {
  CREATED
  ONBOARDING_STARTED
  UNDER_REVIEW
  ACTIVE
}

enum AccountType {
  STRIPE
  OPEN_COLLECTIVE
}

enum BenefitType {
  custom
  ads
  discord
  github_repository
  downloadables
  license_keys
}

enum CheckoutStatus {
  open
  expired
  confirmed
  succeeded
  failed
}

enum DiscountType {
  fixed
  percentage
}

enum DiscountDuration {
  once
  forever
  repeating
}

enum FileServiceTypes {
  downloadable
  product_media
  organization_avatar
}

enum IssueState {
  OPEN
  CLOSED
}

enum LicenseKeyStatus {
  granted
  revoked
  disabled
}

enum OAuthPlatform {
  github
  github_repository_benefit
  discord
  google
}

enum PaymentProcessor {
  stripe
  open_collective
}

enum PledgeState {
  initiated
  created
  pending
  refunded
  disputed
  charge_disputed
  cancelled
}

enum PledgeType {
  pay_upfront
  pay_on_completion
  pay_directly
}

enum ProductPriceType {
  one_time
  recurring
}

enum ProductPriceAmountType {
  fixed
  custom
  free
}

enum SubscriptionStatus {
  incomplete
  incomplete_expired
  trialing
  active
  past_due
  canceled
  unpaid
}

enum TransactionType {
  payment
  processor_fee
  refund
  dispute
  dispute_reversal
  balance
  payout
}

enum WebhookEventType {
  checkout_created
  checkout_updated
  order_created
  subscription_created
  subscription_updated
  subscription_active
  subscription_canceled
  subscription_revoked
  product_created
  product_updated
  benefit_created
  benefit_updated
  benefit_grant_created
  benefit_grant_updated
  benefit_grant_revoked
  organization_updated
  pledge_created
  pledge_updated
}

enum WebhookFormat {
  raw
  discord
  slack
}

model User {
  clerkId                String    @id
  name                   String
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  email                  String    @unique
  avatarUrl              String?
  acceptedTermsOfService Boolean   @default(false)
  blockedAt              DateTime?
  meta                   Json      @default("{}")
  profileSettings        Json      @default("{}")
  featureSettings        Json      @default("{}")

  notifications UserNotification[]
  stores        Store[]
  customers     Customer[]
}

model Account {
  id                      String        @id @default(uuid())
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
  accountType             AccountType
  storeId                 String
  stripeId                String?
  openCollectiveSlug      String?
  email                   String?
  country                 String
  currency                String?
  isDetailsSubmitted      Boolean
  isChargesEnabled        Boolean
  isPayoutsEnabled        Boolean
  processorFeesApplicable Boolean       @default(true)
  platformFeePercent      Int?
  platformFeeFixed        Int?
  businessType            String?
  status                  AccountStatus @default(CREATED)
  data                    Json          @default("{}")

  store Store @relation(fields: [storeId], references: [id])

  Transaction Transaction[]
}

model Customer {
  id               String   @id @default(uuid())
  storeId          String?
  userId           String?  @unique
  stripeCustomerId String?  @unique
  billingEmail     String?
  billingAddress   String?
  metadata         Json     @default("{}")
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  store Store? @relation(fields: [storeId], references: [id], onDelete: Cascade)
  user  User?  @relation(fields: [userId], references: [clerkId], onDelete: Cascade)

  subscriptions Subscription[]
  orders        Order[]
  checkouts     Checkout[]
}

model Store {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  url         String
  active      Boolean  @default(true)
  description String?
  userId      String
  currency    String   @default("USD")

  user             User              @relation(fields: [userId], references: [clerkId], onDelete: Cascade)
  webhookEndpoints WebhookEndpoint[]
  accounts         Account[]
  benefits         Benefit[]
  customfields     CustomField[]
  discounts        Discount[]
  files            File[]
  products         Product[]
  licenceKeys      LicenseKey[]
  Checkout         Checkout[]
  Customer         Customer[]
}

model Benefit {
  id              String      @id @default(uuid())
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  type            BenefitType
  description     String
  storeId         String
  isTaxApplicable Boolean     @default(false)
  selectable      Boolean     @default(true)
  deletable       Boolean     @default(true)
  properties      Json

  store           Store            @relation(fields: [storeId], references: [id], onDelete: Cascade)
  grants          BenefitGrant[]
  productBenefits ProductBenefit[]
  LicenseKey      LicenseKey[]
}

model BenefitGrant {
  id             String    @id @default(uuid())
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  grantedAt      DateTime?
  revokedAt      DateTime?
  properties     Json
  userId         String
  benefitId      String
  subscriptionId String?
  orderId        String?

  benefit      Benefit       @relation(fields: [benefitId], references: [id], onDelete: Cascade)
  subscription Subscription? @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  order        Order?        @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@unique([subscriptionId, userId, benefitId])
  @@index([benefitId])
  @@index([subscriptionId])
  @@index([orderId])
}

model Checkout {
  id                       String         @id @default(uuid())
  createdAt                DateTime       @default(now())
  updatedAt                DateTime       @updatedAt
  paymentProcessor         String
  status                   CheckoutStatus @default(open)
  clientSecret             String         @unique
  expiresAt                DateTime
  paymentProcessorMetadata Json
  successUrl               String?
  embedOrigin              String?
  allowDiscountCodes       Boolean        @default(true)
  amount                   Int?
  taxAmount                Int?
  currency                 String?
  productId                String
  storeId                  String
  productPriceId           String
  discountId               String?
  customerId               String?
  customerName             String?
  customerEmail            String?
  customerIpAddress        String?
  customerBillingAddress   Json           @default("{}")
  customerTaxId            String?

  product            Product              @relation(fields: [productId], references: [id], onDelete: Cascade)
  store              Store                @relation(fields: [storeId], references: [id], onDelete: Cascade)
  productPrice       ProductPrice         @relation(fields: [productPriceId], references: [id], onDelete: Cascade)
  discount           Discount?            @relation(fields: [discountId], references: [id], onDelete: SetNull)
  subscription       Subscription?
  order              Order?
  DiscountRedemption DiscountRedemption[]
  Customer           Customer?            @relation(fields: [customerId], references: [id])
}

model CustomField {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  type       String
  slug       String
  name       String
  properties Json
  storeId    String
  store      Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@index([type])
  @@index([slug])
}

model Discount {
  id               String           @id @default(uuid())
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  name             String
  type             DiscountType
  code             String?
  startsAt         DateTime?
  endsAt           DateTime?
  maxRedemptions   Int?
  duration         DiscountDuration
  durationInMonths Int?
  stripeCouponId   String           @unique

  discountRedemptions DiscountRedemption[]
  discountProducts    DiscountProduct[]
  checkouts           Checkout[]
  subscriptions       Subscription[]
  Order               Order[]
  storeId             String
  store               Store                @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@unique([storeId, code])
}

model DiscountProduct {
  discountId String
  productId  String

  discount Discount @relation(fields: [discountId], references: [id], onDelete: Cascade)
  product  Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@id([discountId, productId])
}

model DiscountRedemption {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  discountId String
  checkoutId String

  discount Discount @relation(fields: [discountId], references: [id], onDelete: Cascade)
  checkout Checkout @relation(fields: [checkoutId], references: [id], onDelete: Cascade)
}

model File {
  id                   String           @id @default(uuid())
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  name                 String
  version              String?
  path                 String
  mimeType             String
  size                 BigInt
  service              FileServiceTypes
  lastModifiedAt       DateTime?
  storageVersion       String?
  checksumEtag         String?
  checksumSha256Base64 String?
  checksumSha256Hex    String?
  isUploaded           Boolean          @default(false)
  isEnabled            Boolean          @default(false)

  ProductMedia ProductMedia[]

  storeId String
  store   Store  @relation(fields: [storeId], references: [id], onDelete: Cascade)
}

model LicenseKey {
  id               String           @id @default(uuid())
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  benefitId        String
  key              String
  status           LicenseKeyStatus
  limitActivations Int?
  usage            Int              @default(0)
  limitUsage       Int?
  validations      Int              @default(0)
  lastValidatedAt  DateTime?
  expiresAt        DateTime?

  storeId     String
  store       Store                  @relation(fields: [storeId], references: [id], onDelete: Cascade)
  benefit     Benefit                @relation(fields: [benefitId], references: [id], onDelete: Cascade)
  activations LicenseKeyActivation[]
}

model LicenseKeyActivation {
  id           String   @id @default(uuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  licenseKeyId String
  label        String
  conditions   Json
  meta         Json

  licenseKey LicenseKey @relation(fields: [licenseKeyId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String  @id @default(uuid())
  userId    String?
  emailAddr String?
  type      String
  payload   Json?
}

model Order {
  id              String   @id @default(uuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  amount          Int
  taxAmount       Int
  currency        String
  billingReason   String
  billingAddress  Json?
  stripeInvoiceId String?
  customerId      String
  productId       String
  productPriceId  String
  discountId      String?
  subscriptionId  String?
  checkoutId      String?  @unique

  product       Product        @relation(fields: [productId], references: [id])
  productPrice  ProductPrice   @relation(fields: [productPriceId], references: [id])
  discount      Discount?      @relation(fields: [discountId], references: [id], onDelete: SetNull)
  subscription  Subscription?  @relation(fields: [subscriptionId], references: [id])
  checkout      Checkout?      @relation(fields: [checkoutId], references: [id], onDelete: SetNull)
  benefitGrants BenefitGrant[]
  Transaction   Transaction[]
  Customer      Customer       @relation(fields: [customerId], references: [id])
}

model Product {
  id              String   @id @default(uuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  name            String
  description     String?
  isArchived      Boolean  @default(false)
  stripeProductId String?

  prices              ProductPrice[]
  productBenefits     ProductBenefit[]
  productMedias       ProductMedia[]
  productCustomFields ProductCustomField[]
  checkouts           Checkout[]
  discountProducts    DiscountProduct[]
  orders              Order[]
  subscriptions       Subscription[]
  storeId             String
  store               Store                @relation(fields: [storeId], references: [id], onDelete: Cascade)
}

model ProductBenefit {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  productId String
  benefitId String
  order     Int

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  benefit Benefit @relation(fields: [benefitId], references: [id], onDelete: Cascade)

  @@unique([productId, order])
}

model ProductCustomField {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  productId String
  order     Int

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, order])
}

model ProductMedia {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  productId String
  fileId    String
  order     Int

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  file    File    @relation(fields: [fileId], references: [id], onDelete: Cascade)

  @@unique([productId, order])
}

enum SubscriptionRecurringInterval {
  month
  year
}

model ProductPrice {
  id                String                         @id @default(uuid())
  createdAt         DateTime                       @default(now())
  updatedAt         DateTime                       @updatedAt
  type              ProductPriceType
  recurringInterval SubscriptionRecurringInterval?
  amountType        ProductPriceAmountType
  isArchived        Boolean                        @default(false)
  stripePriceId     String
  productId         String
  priceCurrency     String?
  priceAmount       Int?
  minimumAmount     Int?
  maximumAmount     Int?
  presetAmount      Int?

  product       Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
  subscriptions Subscription[]
  Checkout      Checkout[]
  Order         Order[]
}

model Subscription {
  id                   String                        @id @default(uuid())
  createdAt            DateTime                      @default(now())
  updatedAt            DateTime                      @updatedAt
  amount               Int?
  currency             String?
  recurringInterval    SubscriptionRecurringInterval
  stripeSubscriptionId String?
  status               SubscriptionStatus
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime?
  cancelAtPeriodEnd    Boolean
  startedAt            DateTime?
  endedAt              DateTime?
  customerId           String
  productId            String
  priceId              String
  discountId           String?
  checkoutId           String?                       @unique // Nullable, as some subscriptions may not originate from a checkout
  customFields         Json?
  metadata             Json?

  product  Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
  customer Customer       @relation(fields: [customerId], references: [id], onDelete: Cascade)
  price    ProductPrice   @relation(fields: [priceId], references: [id], onDelete: Cascade)
  discount Discount?      @relation(fields: [discountId], references: [id], onDelete: SetNull)
  checkout Checkout?      @relation(fields: [checkoutId], references: [id], onDelete: SetNull)
  grants   BenefitGrant[]
  orders   Order[]
}

enum ProcessorFeeType {
  payment
  refund
  dispute
  tax
  subscription
  invoice
  cross_border_transfer
  payout
  account
  security
}

enum PlatformFeeType {
  payment
  international_payment
  subscription
  invoice
  cross_border_transfer
  payout
  account
  platform
}

model Transaction {
  id                           String            @id @default(uuid())
  createdAt                    DateTime          @default(now())
  updatedAt                    DateTime          @updatedAt
  type                         TransactionType
  processor                    PaymentProcessor?
  currency                     String
  amount                       Int
  accountCurrency              String
  accountAmount                Int
  taxAmount                    Int
  taxCountry                   String?
  taxState                     String?
  processorFeeType             ProcessorFeeType?
  balanceCorrelationKey        String?
  platformFeeType              PlatformFeeType?
  customerId                   String?
  chargeId                     String?
  refundId                     String?
  disputeId                    String?
  transferId                   String?
  transferReversalId           String?
  payoutId                     String?
  feeBalanceTransactionId      String?
  riskLevel                    String?
  riskScore                    Int?
  accountId                    String?
  paymentUserId                String?
  pledgeId                     String?
  orderId                      String?
  issueRewardId                String?
  paymentTransactionId         String?
  balanceReversalTransactionId String?
  payoutTransactionId          String?
  incurredByTransactionId      String?

  account                     Account?      @relation(fields: [accountId], references: [id], onDelete: SetNull)
  order                       Order?        @relation(fields: [orderId], references: [id], onDelete: SetNull)
  paymentTransaction          Transaction?  @relation("BalanceTransactions", fields: [paymentTransactionId], references: [id], onDelete: SetNull)
  balanceTransactions         Transaction[] @relation("BalanceTransactions")
  balanceReversalTransaction  Transaction?  @relation("BalanceReversalTransactions", fields: [balanceReversalTransactionId], references: [id], onDelete: SetNull)
  balanceReversalTransactions Transaction[] @relation("BalanceReversalTransactions")
  payoutTransaction           Transaction?  @relation("PaidTransactions", fields: [payoutTransactionId], references: [id], onDelete: SetNull)
  paidTransactions            Transaction[] @relation("PaidTransactions")
  incurredByTransaction       Transaction?  @relation("IncurredTransactions", fields: [incurredByTransactionId], references: [id], onDelete: SetNull)
  incurredTransactions        Transaction[] @relation("IncurredTransactions")
}

model UserNotification {
  userId                 String  @id
  lastReadNotificationId String?

  user User @relation(fields: [userId], references: [clerkId])
}

model WebhookDelivery {
  id                String   @id @default(uuid())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  webhookEndpointId String
  webhookEventId    String
  httpCode          Int?
  succeeded         Boolean

  webhookEvent WebhookEvent @relation(fields: [webhookEventId], references: [id], onDelete: Cascade)

  @@index([webhookEndpointId])
  @@index([webhookEventId])
}

model WebhookEndpoint {
  id           String             @id @default(uuid())
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  url          String
  format       WebhookFormat
  secret       String
  events       WebhookEventType[]
  storeId      String
  store        Store              @relation(fields: [storeId], references: [id], onDelete: Cascade)
  WebhookEvent WebhookEvent[]

  @@index([storeId])
}

model WebhookEvent {
  id                String   @id @default(uuid())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  webhookEndpointId String
  lastHttpCode      Int?
  succeeded         Boolean?
  payload           String

  webhookEndpoint   WebhookEndpoint   @relation(fields: [webhookEndpointId], references: [id], onDelete: Cascade)
  webhookDeliveries WebhookDelivery[]

  @@index([webhookEndpointId])
}
